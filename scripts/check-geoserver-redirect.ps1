<#
.SYNOPSIS
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏ GeoServer —á–µ—Ä–µ–∑ NGINX –ø—Ä–æ–∫—Å–∏.

.DESCRIPTION
    –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NGINX –∏ GeoServer –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è 
    –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ proxy_redirect, 
    –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã CATALINA_OPTS.

.PARAMETER Test
    –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.

.PARAMETER Fix
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.

.PARAMETER Verbose
    –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.

.EXAMPLE
    .\check-geoserver-redirect.ps1 -Test
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.

.EXAMPLE
    .\check-geoserver-redirect.ps1 -Fix
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.

.NOTES
    –ê–≤—Ç–æ—Ä: GIS Automation Team
    –î–∞—Ç–∞: 2025-03-05
#>

param (
    [switch]$Test,
    [switch]$Fix,
    [switch]$Verbose
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
function Write-LogMessage {
    param (
        [string]$Message,
        [ValidateSet("INFO", "WARNING", "ERROR", "SUCCESS")]
        [string]$Level = "INFO"
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $colors = @{
        "INFO" = "White";
        "WARNING" = "Yellow";
        "ERROR" = "Red";
        "SUCCESS" = "Green"
    }
    
    Write-Host "[$timestamp] " -NoNewline
    Write-Host "[$Level] " -ForegroundColor $colors[$Level] -NoNewline
    Write-Host $Message
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
function Test-UrlAccess {
    param (
        [string]$Url,
        [string]$Description,
        [string]$ExpectedStatus = "200"
    )
    
    try {
        Write-LogMessage "–ü—Ä–æ–≤–µ—Ä–∫–∞ URL: $Url" -Level "INFO"
        $response = Invoke-WebRequest -Uri $Url -UseBasicParsing -MaximumRedirection 0 -ErrorAction SilentlyContinue
        $statusCode = $response.StatusCode
        
        if ($Verbose) {
            Write-LogMessage "–û—Ç–≤–µ—Ç: $statusCode, –û–∂–∏–¥–∞–µ–º—ã–π: $ExpectedStatus" -Level "INFO"
            Write-LogMessage "–ó–∞–≥–æ–ª–æ–≤–∫–∏: $($response.Headers | Out-String)" -Level "INFO"
        }
        
        if ($statusCode -eq $ExpectedStatus) {
            Write-LogMessage "‚úÖ $Description`: URL $Url –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å $statusCode)" -Level "SUCCESS"
            return $true
        } else {
            Write-LogMessage "‚ùå $Description`: URL $Url –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å $statusCode –≤–º–µ—Å—Ç–æ $ExpectedStatus" -Level "WARNING"
            return $false
        }
    } catch {
        $exceptionMessage = $_.Exception.Message
        $statusCode = $_.Exception.Response.StatusCode.value__
        
        if ($Verbose) {
            Write-LogMessage "–û—à–∏–±–∫–∞: $exceptionMessage" -Level "INFO"
            Write-LogMessage "–°—Ç–∞—Ç—É—Å: $statusCode" -Level "INFO"
        }
        
        if ($statusCode -eq $ExpectedStatus) {
            Write-LogMessage "‚úÖ $Description`: URL $Url –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å $statusCode)" -Level "SUCCESS"
            return $true
        } else {
            Write-LogMessage "‚ùå $Description`: URL $Url –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å $statusCode –≤–º–µ—Å—Ç–æ $ExpectedStatus" -Level "ERROR"
            return $false
        }
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NGINX
function Test-NginxConfig {
    param (
        [switch]$Fix
    )
    
    $configPath = "config/nginx/conf.d/default.conf"
    $problems = @()
    
    if (-not (Test-Path $configPath)) {
        Write-LogMessage "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NGINX –Ω–µ –Ω–∞–π–¥–µ–Ω: $configPath" -Level "ERROR"
        return $false
    }
    
    $configContent = Get-Content $configPath -Raw
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è location –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ GeoServer
    if (-not ($configContent -match "location\s*=\s*/geoserver/\s*{")) {
        $problems += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–ª–æ–∫ location –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ /geoserver/"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ proxy_redirect
    if ($configContent -match "proxy_redirect\s+off;") {
        $problems += "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'proxy_redirect off;' –≤–º–µ—Å—Ç–æ 'proxy_redirect default off;'"
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    $requiredHeaders = @(
        "proxy_set_header\s+Host\s+\`$host;",
        "proxy_set_header\s+X-Forwarded-Host\s+\`$host;",
        "proxy_set_header\s+X-Forwarded-Server\s+\`$host;",
        "proxy_set_header\s+X-Forwarded-For\s+\`$proxy_add_x_forwarded_for;"
    )
    
    foreach ($header in $requiredHeaders) {
        if (-not ($configContent -match $header)) {
            $problems += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: $header"
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (-not ($configContent -match "proxy_pass_request_body\s+on;")) {
        $problems += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 'proxy_pass_request_body on;'"
    }
    
    if (-not ($configContent -match "proxy_pass_request_headers\s+on;")) {
        $problems += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 'proxy_pass_request_headers on;'"
    }
    
    # –í—ã–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º
    if ($problems.Count -eq 0) {
        Write-LogMessage "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NGINX —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º" -Level "SUCCESS"
        return $true
    } else {
        Write-LogMessage "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NGINX:" -Level "WARNING"
        foreach ($problem in $problems) {
            Write-LogMessage "   - $problem" -Level "WARNING"
        }
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä -Fix
        if ($Fix) {
            Write-LogMessage "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NGINX..." -Level "INFO"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            $backupFile = "backups/nginx-$(Get-Date -Format 'yyyy-MM-dd-HHmmss').conf"
            $backupDir = Split-Path $backupFile -Parent
            
            if (-not (Test-Path $backupDir)) {
                New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
            }
            
            Copy-Item $configPath $backupFile
            Write-LogMessage "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupFile" -Level "INFO"
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ proxy_redirect
            if ($problems -contains "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'proxy_redirect off;' –≤–º–µ—Å—Ç–æ 'proxy_redirect default off;'") {
                $configContent = $configContent -replace "proxy_redirect\s+off;", "proxy_redirect default off;"
                Write-LogMessage "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: proxy_redirect off -> proxy_redirect default off" -Level "INFO"
            }
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...
            # [–∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º]
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            $configContent | Set-Content $configPath
            Write-LogMessage "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NGINX –æ–±–Ω–æ–≤–ª–µ–Ω–∞" -Level "SUCCESS"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ NGINX
            Write-LogMessage "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ NGINX –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..." -Level "INFO"
            $dockerResult = docker-compose exec -T nginx nginx -t 2>&1
            
            if ($LASTEXITCODE -eq 0) {
                Write-LogMessage "‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å NGINX –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" -Level "SUCCESS"
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ NGINX
                Write-LogMessage "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ NGINX..." -Level "INFO"
                docker-compose restart nginx
                Write-LogMessage "‚úÖ NGINX –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω" -Level "SUCCESS"
            } else {
                Write-LogMessage "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ NGINX –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:" -Level "ERROR"
                Write-LogMessage $dockerResult -Level "ERROR"
                
                # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                Write-LogMessage "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..." -Level "INFO"
                Copy-Item $backupFile $configPath
                Write-LogMessage "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏" -Level "SUCCESS"
            }
        }
        
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GeoServer
function Test-GeoServerConfig {
    param (
        [switch]$Fix
    )
    
    $dockerComposeFile = "config/docker/dev/docker-compose.yml"
    $problems = @()
    
    if (-not (Test-Path $dockerComposeFile)) {
        Write-LogMessage "‚ùå –§–∞–π–ª docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω: $dockerComposeFile" -Level "ERROR"
        return $false
    }
    
    $composeContent = Get-Content $dockerComposeFile -Raw
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ CATALINA_OPTS –¥–ª—è GeoServer Vector
    if (-not ($composeContent -match "-Dorg\.geoserver\.web\.proxy\.base=http://localhost/geoserver/vector/web")) {
        $problems += "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä proxy.base –¥–ª—è GeoServer Vector"
    }
    
    if (-not ($composeContent -match "-Dorg\.geoserver\.use\.header\.proxy=true")) {
        $problems += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä use.header.proxy=true –¥–ª—è GeoServer"
    }
    
    if (-not ($composeContent -match "-DGEOSERVER_CSRF_DISABLED=true")) {
        $problems += "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä GEOSERVER_CSRF_DISABLED=true –¥–ª—è GeoServer"
    }
    
    # –í—ã–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º
    if ($problems.Count -eq 0) {
        Write-LogMessage "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GeoServer —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º" -Level "SUCCESS"
        return $true
    } else {
        Write-LogMessage "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GeoServer:" -Level "WARNING"
        foreach ($problem in $problems) {
            Write-LogMessage "   - $problem" -Level "WARNING"
        }
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä -Fix
        if ($Fix) {
            Write-LogMessage "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GeoServer..." -Level "INFO"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            $backupFile = "backups/docker-compose-$(Get-Date -Format 'yyyy-MM-dd-HHmmss').yml"
            $backupDir = Split-Path $backupFile -Parent
            
            if (-not (Test-Path $backupDir)) {
                New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
            }
            
            Copy-Item $dockerComposeFile $backupFile
            Write-LogMessage "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: $backupFile" -Level "INFO"
            
            # –ü–∞—Ä—Å–∏–Ω–≥ YAML
            $dockerYaml = Get-Content $dockerComposeFile -Raw
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ CATALINA_OPTS –¥–ª—è GeoServer Vector
            if ($problems -contains "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä proxy.base –¥–ª—è GeoServer Vector") {
                if ($dockerYaml -match "CATALINA_OPTS=(.+?)\s+\-") {
                    $catalina = $Matches[1]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    if (-not ($catalina -match "-Dorg\.geoserver\.web\.proxy\.base")) {
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                        $newCatalina = $catalina.TrimEnd(" ") + " -Dorg.geoserver.web.proxy.base=http://localhost/geoserver/vector/web "
                        $dockerYaml = $dockerYaml -replace [regex]::Escape($catalina), $newCatalina
                    } else {
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                        $dockerYaml = $dockerYaml -replace "-Dorg\.geoserver\.web\.proxy\.base=([^ ]+)", "-Dorg.geoserver.web.proxy.base=http://localhost/geoserver/vector/web"
                    }
                }
            }
            
            if ($problems -contains "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä use.header.proxy=true –¥–ª—è GeoServer") {
                if (-not ($dockerYaml -match "-Dorg\.geoserver\.use\.header\.proxy=true")) {
                    $dockerYaml = $dockerYaml -replace "CATALINA_OPTS=(.+?)(\s+\-|\s*$)", "CATALINA_OPTS=`$1 -Dorg.geoserver.use.header.proxy=true`$2"
                }
            }
            
            if ($problems -contains "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä GEOSERVER_CSRF_DISABLED=true –¥–ª—è GeoServer") {
                if (-not ($dockerYaml -match "-DGEOSERVER_CSRF_DISABLED=true")) {
                    $dockerYaml = $dockerYaml -replace "CATALINA_OPTS=(.+?)(\s+\-|\s*$)", "CATALINA_OPTS=`$1 -DGEOSERVER_CSRF_DISABLED=true`$2"
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            $dockerYaml | Set-Content $dockerComposeFile
            Write-LogMessage "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GeoServer –æ–±–Ω–æ–≤–ª–µ–Ω–∞" -Level "SUCCESS"
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            Write-LogMessage "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ GeoServer –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..." -Level "INFO"
            docker-compose restart geoserver-vector geoserver-ecw
            Write-LogMessage "‚úÖ GeoServer –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã" -Level "SUCCESS"
        }
        
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
function Test-UrlRouting {
    $urls = @(
        @{
            Url = "http://localhost/geoserver/";
            Description = "–û—Å–Ω–æ–≤–Ω–æ–π URL GeoServer";
            ExpectedStatus = "200"
        },
        @{
            Url = "http://localhost/geoserver/vector/web/";
            Description = "URL GeoServer Vector";
            ExpectedStatus = "200"
        },
        @{
            Url = "http://localhost/geoserver/ecw/web/";
            Description = "URL GeoServer ECW";
            ExpectedStatus = "200"
        },
        @{
            Url = "http://localhost/geoserver/web/";
            Description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∏–Ω—Å—Ç–∞–Ω—Ü–∏–∏";
            ExpectedStatus = "302"
        }
    )
    
    $failures = 0
    
    foreach ($urlObj in $urls) {
        $result = Test-UrlAccess -Url $urlObj.Url -Description $urlObj.Description -ExpectedStatus $urlObj.ExpectedStatus
        if (-not $result) {
            $failures++
        }
    }
    
    if ($failures -eq 0) {
        Write-LogMessage "‚úÖ –í—Å–µ URL –º–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ" -Level "SUCCESS"
        return $true
    } else {
        Write-LogMessage "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å URL –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π ($failures –æ—à–∏–±–æ–∫)" -Level "WARNING"
        return $false
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è curl —á–µ—Ä–µ–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
function Invoke-DockerCurl {
    param (
        [string]$Url,
        [string]$Method = "GET",
        [switch]$IncludeHeaders
    )
    
    $headerArg = if ($IncludeHeaders) { "-i" } else { "" }
    
    try {
        $result = docker-compose exec -T nginx curl -s $headerArg -X $Method $Url
        return $result
    } catch {
        Write-LogMessage "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è curl: $_" -Level "ERROR"
        return $null
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
function Test-HeadersFromContainer {
    param (
        [string]$Url,
        [string]$Description
    )
    
    Write-LogMessage "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è $Url –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..." -Level "INFO"
    
    $result = Invoke-DockerCurl -Url $Url -IncludeHeaders
    
    if (-not $result) {
        Write-LogMessage "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è $Url" -Level "ERROR"
        return $false
    }
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    $statusLine = ($result -split "`n")[0]
    $statusCode = $statusLine -replace "HTTP/\d\.\d\s+(\d+).*", '$1'
    
    Write-LogMessage "–°—Ç–∞—Ç—É—Å-–∫–æ–¥: $statusCode" -Level "INFO"
    
    if ($result -match "Location:\s*([^\r\n]+)") {
        $location = $Matches[1]
        Write-LogMessage "Location: $location" -Level "INFO"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        if ($Url -match "/geoserver/web/" -and -not ($location -match "/geoserver/(vector|ecw)/web/")) {
            Write-LogMessage "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è $Url –Ω–∞ $location. –û–∂–∏–¥–∞–ª—Å—è —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—é vector –∏–ª–∏ ecw." -Level "WARNING"
            return $false
        }
    }
    
    if ($Verbose) {
        Write-LogMessage "–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:" -Level "INFO"
        Write-LogMessage $result -Level "INFO"
    }
    
    return $true
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
function Start-GeoServerRedirectCheck {
    param (
        [switch]$Fix
    )
    
    $title = "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏ GeoServer"
    $border = "=" * $title.Length
    
    Write-Host ""
    Write-Host $border -ForegroundColor Cyan
    Write-Host $title -ForegroundColor Cyan
    Write-Host $border -ForegroundColor Cyan
    Write-Host ""
    
    $mode = if ($Fix) { "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º" } else { "–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π" }
    Write-LogMessage "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å $mode –ø—Ä–æ–±–ª–µ–º..." -Level "INFO"
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NGINX
    Write-Host "`n[–®–∞–≥ 1/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NGINX" -ForegroundColor Cyan
    $nginxConfigOk = Test-NginxConfig -Fix:$Fix
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GeoServer
    Write-Host "`n[–®–∞–≥ 2/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ GeoServer" -ForegroundColor Cyan
    $geoserverConfigOk = Test-GeoServerConfig -Fix:$Fix
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
    Write-Host "`n[–®–∞–≥ 3/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏" -ForegroundColor Cyan
    $urlRoutingOk = Test-UrlRouting
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    Write-Host "`n[–®–∞–≥ 4/4] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤" -ForegroundColor Cyan
    Test-HeadersFromContainer -Url "http://localhost/geoserver/web/" -Description "–†–µ–¥–∏—Ä–µ–∫—Ç —Å GeoServer Web"
    
    # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
    Write-Host "`n" + ("=" * 50) -ForegroundColor Cyan
    Write-Host "–ò—Ç–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏" -ForegroundColor Cyan
    Write-Host ("=" * 50) -ForegroundColor Cyan
    
    $items = @(
        @{ Name = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è NGINX"; Status = $nginxConfigOk },
        @{ Name = "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GeoServer"; Status = $geoserverConfigOk },
        @{ Name = "URL –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è"; Status = $urlRoutingOk }
    )
    
    foreach ($item in $items) {
        $statusSymbol = if ($item.Status) { "‚úÖ" } else { "‚ùå" }
        $statusColor = if ($item.Status) { "Green" } else { "Red" }
        Write-Host "$statusSymbol " -ForegroundColor $statusColor -NoNewline
        Write-Host $item.Name
    }
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    Write-Host "`n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" -ForegroundColor Cyan
    
    if (-not $nginxConfigOk -or -not $geoserverConfigOk -or -not $urlRoutingOk) {
        Write-Host "  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º -Fix –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:" -ForegroundColor Yellow
        Write-Host "     .\check-geoserver-redirect.ps1 -Fix" -ForegroundColor Yellow
        
        if (-not $nginxConfigOk) {
            Write-Host "  2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NGINX –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –±–ª–æ–∫–∏ location" -ForegroundColor Yellow
            Write-Host "     –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã proxy_redirect –∏ proxy_set_header." -ForegroundColor Yellow
        }
        
        if (-not $geoserverConfigOk) {
            Write-Host "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã CATALINA_OPTS –¥–ª—è GeoServer –≤ docker-compose.yml:" -ForegroundColor Yellow
            Write-Host "     - Dorg.geoserver.web.proxy.base –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL" -ForegroundColor Yellow
            Write-Host "     - Dorg.geoserver.use.header.proxy=true –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω" -ForegroundColor Yellow
            Write-Host "     - DGEOSERVER_CSRF_DISABLED=true –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º" -ForegroundColor Yellow
        }
    } else {
        Write-Host "  ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –†–µ–¥–∏—Ä–µ–∫—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ." -ForegroundColor Green
    }
    
    Write-Host "`n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:" -ForegroundColor Cyan
    Write-Host "  - –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—é GeoServer: https://docs.geoserver.org/latest/en/user/production/container.html#proxying" -ForegroundColor White
    Write-Host "  - –ñ—É—Ä–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: docs/storybook.md" -ForegroundColor White
    
    Write-Host ""
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
Start-GeoServerRedirectCheck -Fix:$Fix 