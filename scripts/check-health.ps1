# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
param(
    [switch]$Verbose,
    [switch]$FixProblems
)

Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ì–ò–°-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã..." -ForegroundColor Cyan

$services = @("postgis", "geoserver-vector", "geoserver-ecw", "nginx")
$prefix = ""
$suffix = ""
$healthy = $true
$needsAttention = @()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
Write-Host "`n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker..." -ForegroundColor Cyan
foreach ($service in $services) {
    try {
        $containerName = "$prefix$service$suffix"
        $container = docker ps -a --filter "name=$containerName" --format "{{.Names}} | {{.Status}}" 2>$null
        
        if ([string]::IsNullOrEmpty($container)) {
            Write-Host "‚ùå ${service}: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
            $healthy = $false
            $needsAttention += $service
            continue
        }

        $containerParts = $container -split ' \| '
        $containerStatus = $containerParts[1]
        
        if ($containerStatus -match "^Up ") {
            $status = docker inspect --format='{{.State.Health.Status}}' $containerName 2>$null
            
            if ($status -eq "healthy") {
                Write-Host "‚úì ${service}: —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ" -ForegroundColor Green
            } 
            elseif ($status -eq "starting") {
                Write-Host "‚ö†Ô∏è ${service}: –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è - –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..." -ForegroundColor Yellow
                $healthy = $false
                $needsAttention += $service
            }
            else {
                Write-Host "‚ùå ${service}: –∑–∞–ø—É—â–µ–Ω, –Ω–æ –Ω–µ –≤ –∑–¥–æ—Ä–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏" -ForegroundColor Red
                $healthy = $false
                $needsAttention += $service
                
                if ($Verbose) {
                    Write-Host "`n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ –¥–ª—è ${service}:" -ForegroundColor Cyan
                    docker logs --tail 10 $containerName
                }
            }
        }
        else {
            Write-Host "‚ùå ${service}: –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Red
            $healthy = $false
            $needsAttention += $service
            
            if ($FixProblems) {
                Write-Host "üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${service}..." -ForegroundColor Yellow
                docker start $containerName
                Start-Sleep -Seconds 2
                
                $newStatus = docker inspect --format='{{.State.Status}}' $containerName 2>$null
                if ($newStatus -eq "running") {
                    Write-Host "‚úì ${service}: —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green
                }
                else {
                    Write-Host "‚ùå ${service}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å" -ForegroundColor Red
                }
            }
        }
    }
    catch {
        Write-Host "‚ùå ${service}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ - $($_.Exception.Message)" -ForegroundColor Red
        $healthy = $false
        $needsAttention += $service
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ HTTP
Write-Host "`n–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤..." -ForegroundColor Cyan

$endpoints = @{
    "WebGIS" = "http://localhost/webgis/";
    "GeoServer" = "http://localhost/geoserver/";
}

foreach ($endpoint in $endpoints.GetEnumerator()) {
    try {
        $response = Invoke-WebRequest -Uri $endpoint.Value -Method Head -UseBasicParsing -TimeoutSec 5 -ErrorAction SilentlyContinue
        
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úì $($endpoint.Key): –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
        }
        else {
            Write-Host "‚ö†Ô∏è $($endpoint.Key): —Å—Ç–∞—Ç—É—Å $($response.StatusCode)" -ForegroundColor Yellow
        }
    }
    catch {
        Write-Host "‚ùå $($endpoint.Key): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - $($_.Exception.Message)" -ForegroundColor Red
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostGIS
Write-Host "`n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostGIS..." -ForegroundColor Cyan
try {
    $result = docker exec -it postgis psql -U postgres -d gis -c "SELECT PostGIS_version();" -t 2>$null
    if ($LASTEXITCODE -eq 0) {
        $version = $result.Trim()
        Write-Host "‚úì PostGIS: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –≤–µ—Ä—Å–∏—è $version" -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå PostGIS: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å" -ForegroundColor Red
    }
}
catch {
    Write-Host "‚ùå PostGIS: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - $($_.Exception.Message)" -ForegroundColor Red
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
Write-Host "`n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..." -ForegroundColor Cyan
$dockerInfo = docker system df --format '{{.TotalCount}} {{.Size}}'
$dockerInfoParts = $dockerInfo -split "\s+"
$dockerImagesCount = $dockerInfoParts[0]
$dockerSpaceUsage = $dockerInfoParts[1]

Write-Host "Docker: $dockerImagesCount –æ–±—Ä–∞–∑–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è $dockerSpaceUsage –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞" -ForegroundColor White

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–ª—å—à–∏—Ö ECW —Ñ–∞–π–ª–æ–≤
$ecwPath = "data/raster-storage/ecw"
if (Test-Path $ecwPath) {
    $ecwFiles = Get-ChildItem -Path $ecwPath -Filter "*.ecw" -File | Sort-Object Length -Descending
    
    if ($ecwFiles.Count -gt 0) {
        Write-Host "`n–ù–∞–π–¥–µ–Ω–æ $($ecwFiles.Count) ECW —Ñ–∞–π–ª–æ–≤:" -ForegroundColor Cyan
        
        foreach ($file in $ecwFiles | Select-Object -First 5) {
            $sizeGB = [math]::Round($file.Length / 1GB, 2)
            Write-Host "$($file.Name): $sizeGB –ì–ë" -ForegroundColor White
        }
        
        if ($ecwFiles.Count -gt 5) {
            Write-Host "... –∏ –µ—â–µ $($ecwFiles.Count - 5) —Ñ–∞–π–ª–æ–≤" -ForegroundColor Gray
        }
    }
    else {
        Write-Host "`nECW —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $ecwPath" -ForegroundColor Yellow
    }
}
else {
    Write-Host "`n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $ecwPath –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Yellow
}

# –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
if ($healthy) {
    Write-Host "`n‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!" -ForegroundColor Green
}
else {
    Write-Host "`n‚ö†Ô∏è –°–ª–µ–¥—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è:" -ForegroundColor Red
    foreach ($service in $needsAttention) {
        Write-Host "  - $service" -ForegroundColor Red
    }
    
    Write-Host "`n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º:" -ForegroundColor Yellow
    Write-Host "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose restart $($needsAttention -join ' ')" -ForegroundColor White
    Write-Host "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏: docker-compose logs $($needsAttention -join ' ')" -ForegroundColor White
    Write-Host "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã: docker-compose down && docker-compose up -d" -ForegroundColor White
    
    if ($FixProblems) {
        Write-Host "`n–ë—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º." -ForegroundColor Cyan
        Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤." -ForegroundColor Cyan
    }
    else {
        Write-Host "`n–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:" -ForegroundColor Cyan
        Write-Host ".\scripts\check-health.ps1 -FixProblems" -ForegroundColor White
    }
}

Write-Host "`n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." -ForegroundColor Cyan 